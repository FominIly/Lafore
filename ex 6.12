#include "pch.h"
#include <iostream>
#include <iomanip>
#include <cmath>

class Fraction
{
private:
	int numerator, denominator;
public:
	Fraction() :numerator(0), denominator(0)
	{}
	void get_denominator()
	{
		std::cout << "Enter the basic denominator: ";
		std::cin >> denominator;
	}

	void build_table()
	{
		int j;
		int b;

		Fraction temp_1;
		Fraction temp_2;
		Fraction answer;

		for (j = 1; j < denominator; j++)
		{
			temp_1.numerator = j;
			temp_1.denominator = denominator;
			temp_1.lowterms();
			std::cout << temp_1.numerator << "/" << temp_1.denominator << " ";
		}
		
		std::cout << std::setw(50) << std::setfill('-') << std::endl << "\n";

		for (j = 1; j < denominator; j++)
		{
			temp_1.numerator = j;
			temp_1.denominator = denominator;
			temp_1.lowterms();
			std::cout << temp_1.numerator << "/" << temp_1.denominator << " ";

			for (b = 1; b < denominator; b++)
			{
				temp_2.numerator = b;
				temp_2.denominator = denominator;
				temp_2.lowterms();
				answer.mul_fr(temp_1, temp_2);
				answer.lowterms();
				std::cout << answer.numerator << "/" << answer.denominator << " ";
			}
			std::cout << std::endl;
		}
	}
	void mul_fr(Fraction f1, Fraction f2)
	{
		numerator = f1.numerator * f2.numerator;
		denominator = f1.denominator * f2.denominator;
	}

	void lowterms()
	{
		long tnum, tden, temp, gcd;
		tnum = labs(numerator);            // используем неотрицательные
		tden = labs(denominator);            // значения (нужен cmath)
		if (tden == 0)              // проверка знаменателя на 0
		{
			std::cout << "Недопустимый знаменатель!"; exit(1);
		}
		else if (tnum == 0)         // проверка числителя на 0
		{
			numerator = 0; denominator = 1; return;
		}
		// нахождение наибольшего общего делителя
		while (tnum != 0)
		{
			if (tnum < tden)          // если числитель больше знаменателя,
			{
				temp = tnum; tnum = tden; tden = temp;
			} //меняем их местами
			tnum = tnum - tden;        // вычитание
		}
		gcd = tden;                  // делим числитель и знаменатель на
		numerator = numerator / gcd;             // полученный наибольший общий делитель
		denominator = denominator / gcd;
	}
};

int main()
{
	class Fraction basis;

	basis.get_denominator();
	basis.build_table();

	return 0;
}
